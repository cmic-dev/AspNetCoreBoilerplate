// <auto-generated />
using System;
using AspNetCoreBoilerplate.Core.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AspNetCoreBoilerplate.Core.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251025124459_AddAuthModule")]
    partial class AddAuthModule
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AspNetCoreBoilerplate.Modules.Auth.Core.Entities.LoginHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Browser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Device")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Platform")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Timestamp");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "Timestamp");

                    b.ToTable("LoginHistories", "auth");
                });

            modelBuilder.Entity("AspNetCoreBoilerplate.Modules.Auth.Core.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Browser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Device")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Platform")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExpiryTime");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId", "IsRevoked");

                    b.HasIndex("UserId", "ExpiryTime", "IsRevoked");

                    b.ToTable("RefreshTokens", "auth");
                });

            modelBuilder.Entity("AspNetCoreBoilerplate.Modules.Auth.Core.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles", "auth");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1a2e5e2-95d3-4cb6-a56d-4f7e01c8921c"),
                            Description = "System administrator with unrestricted access to all modules and settings.",
                            DisplayName = "Super Admin",
                            IsSystem = true,
                            Name = "super_admin"
                        },
                        new
                        {
                            Id = new Guid("b2b3f6f3-a6e4-5dc7-b67e-5f8f12d9a32d"),
                            Description = "Administrator with broad access to system management and configuration.",
                            DisplayName = "Admin",
                            IsSystem = true,
                            Name = "admin"
                        },
                        new
                        {
                            Id = new Guid("c3c4f7f4-b7f5-6ed8-c78f-6f9f13e0b43e"),
                            Description = "Moderator with content moderation and user management capabilities.",
                            DisplayName = "Moderator",
                            IsSystem = true,
                            Name = "moderator"
                        },
                        new
                        {
                            Id = new Guid("d4d5f8f5-c8f6-7fe9-d89f-7f0f14f1c54f"),
                            Description = "Manager with team and resource management responsibilities.",
                            DisplayName = "Manager",
                            IsSystem = true,
                            Name = "manager"
                        },
                        new
                        {
                            Id = new Guid("e5e6f9f6-d9f7-8af0-e9af-8f1f15f2d65f"),
                            Description = "Editor with content creation and editing privileges.",
                            DisplayName = "Editor",
                            IsSystem = true,
                            Name = "editor"
                        },
                        new
                        {
                            Id = new Guid("f6f7f0f7-e0f8-9bf1-f0bf-9f2f16f3e76f"),
                            Description = "Standard user with basic access to the application.",
                            DisplayName = "User",
                            IsSystem = true,
                            Name = "user"
                        },
                        new
                        {
                            Id = new Guid("a7a8f1f8-f1f9-0cf2-a1cf-0f3f17f4f87f"),
                            Description = "Guest user with limited access to public features only.",
                            DisplayName = "Guest",
                            IsSystem = true,
                            Name = "guest"
                        });
                });

            modelBuilder.Entity("AspNetCoreBoilerplate.Modules.Auth.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSystem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastFailedLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastSuccessfulLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("PasswordChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("RequiresPasswordChange")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.HasIndex("UserName", "IsDeleted")
                        .IsUnique()
                        .HasFilter("[IsDeleted] = CAST(0 AS bit)");

                    b.ToTable("Users", "auth");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0a622c44-e9a4-414e-b8af-44d70c90f0b3"),
                            Email = "",
                            FailedLoginAttempts = 0,
                            IsDeleted = false,
                            IsSystem = true,
                            Password = "sD3fPKLnFKZUjnSV4qA/XoJOqsmDfNfxWcZ7kPtLc0I=",
                            RequiresPasswordChange = false,
                            RoleId = new Guid("a1a2e5e2-95d3-4cb6-a56d-4f7e01c8921c"),
                            UserName = "system"
                        },
                        new
                        {
                            Id = new Guid("b348eeb7-f5b7-4076-9a57-168f9052c342"),
                            Email = "",
                            FailedLoginAttempts = 0,
                            IsDeleted = false,
                            IsSystem = true,
                            Password = "sD3fPKLnFKZUjnSV4qA/XoJOqsmDfNfxWcZ7kPtLc0I=",
                            RequiresPasswordChange = false,
                            RoleId = new Guid("a1a2e5e2-95d3-4cb6-a56d-4f7e01c8921c"),
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("AspNetCoreBoilerplate.Modules.Auth.Core.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfiles", "auth");
                });

            modelBuilder.Entity("AspNetCoreBoilerplate.Modules.Auth.Core.Entities.LoginHistory", b =>
                {
                    b.HasOne("AspNetCoreBoilerplate.Modules.Auth.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AspNetCoreBoilerplate.Modules.Auth.Core.Entities.RefreshToken", b =>
                {
                    b.HasOne("AspNetCoreBoilerplate.Modules.Auth.Core.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AspNetCoreBoilerplate.Modules.Auth.Core.Entities.User", b =>
                {
                    b.HasOne("AspNetCoreBoilerplate.Modules.Auth.Core.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AspNetCoreBoilerplate.Modules.Auth.Core.Entities.UserProfile", b =>
                {
                    b.HasOne("AspNetCoreBoilerplate.Modules.Auth.Core.Entities.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("AspNetCoreBoilerplate.Modules.Auth.Core.Entities.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AspNetCoreBoilerplate.Modules.Auth.Core.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UserProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
